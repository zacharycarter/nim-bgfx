# Copyright 2017 Cory Noll Crimmins-Golden
# License: BSD-2
# Port of bgfx metaballs example 02 to nim and nim-bgfx

import bgfx
import ../bgfx_utils
import ../fpu_math
when defined(useSDL):
    import ../sdl_platform
elif defined(useGLFW) or not defined(useSDL):
    import ../glfw_platform
import parseopt2
import os
import tables
import fs_metaballs
import vs_metaballs

type Grid = object
    value: float32
    normal: Vec3

const DIMS = 32
const FDIMS = 32'f32

type ExampleMetaball = ref object
    m_width*: uint32
    m_height*: uint32
    m_window_width*: uint32
    m_window_height*: uint32
    m_debug*: uint32
    m_reset*: uint32
    m_program*: bgfx.ProgramHandle
    m_grid*: array[DIMS*DIMS*DIMS, Grid]
    m_timeOffset*: float64

type PosNormalColorVertex {.packed, pure.} = object
    position: Vec3
    normal: Vec3
    abgr: array[4, uint8]

let s_edges: array[256, uint16] = [ 
    0x000'u16, 0x109'u16, 0x203'u16, 0x30a'u16, 0x406'u16, 0x50f'u16, 0x605'u16, 0x70c'u16,
    0x80c'u16, 0x905'u16, 0xa0f'u16, 0xb06'u16, 0xc0a'u16, 0xd03'u16, 0xe09'u16, 0xf00'u16,
    0x190'u16, 0x099'u16, 0x393'u16, 0x29a'u16, 0x596'u16, 0x49f'u16, 0x795'u16, 0x69c'u16,
    0x99c'u16, 0x895'u16, 0xb9f'u16, 0xa96'u16, 0xd9a'u16, 0xc93'u16, 0xf99'u16, 0xe90'u16,
    0x230'u16, 0x339'u16, 0x033'u16, 0x13a'u16, 0x636'u16, 0x73f'u16, 0x435'u16, 0x53c'u16,
    0xa3c'u16, 0xb35'u16, 0x83f'u16, 0x936'u16, 0xe3a'u16, 0xf33'u16, 0xc39'u16, 0xd30'u16,
    0x3a0'u16, 0x2a9'u16, 0x1a3'u16, 0x0aa'u16, 0x7a6'u16, 0x6af'u16, 0x5a5'u16, 0x4ac'u16,
    0xbac'u16, 0xaa5'u16, 0x9af'u16, 0x8a6'u16, 0xfaa'u16, 0xea3'u16, 0xda9'u16, 0xca0'u16,
    0x460'u16, 0x569'u16, 0x663'u16, 0x76a'u16,  0x66'u16, 0x16f'u16, 0x265'u16, 0x36c'u16,
    0xc6c'u16, 0xd65'u16, 0xe6f'u16, 0xf66'u16, 0x86a'u16, 0x963'u16, 0xa69'u16, 0xb60'u16,
    0x5f0'u16, 0x4f9'u16, 0x7f3'u16, 0x6fa'u16, 0x1f6'u16, 0x0ff'u16, 0x3f5'u16, 0x2fc'u16,
    0xdfc'u16, 0xcf5'u16, 0xfff'u16, 0xef6'u16, 0x9fa'u16, 0x8f3'u16, 0xbf9'u16, 0xaf0'u16,
    0x650'u16, 0x759'u16, 0x453'u16, 0x55a'u16, 0x256'u16, 0x35f'u16, 0x055'u16, 0x15c'u16,
    0xe5c'u16, 0xf55'u16, 0xc5f'u16, 0xd56'u16, 0xa5a'u16, 0xb53'u16, 0x859'u16, 0x950'u16,
    0x7c0'u16, 0x6c9'u16, 0x5c3'u16, 0x4ca'u16, 0x3c6'u16, 0x2cf'u16, 0x1c5'u16, 0x0cc'u16,
    0xfcc'u16, 0xec5'u16, 0xdcf'u16, 0xcc6'u16, 0xbca'u16, 0xac3'u16, 0x9c9'u16, 0x8c0'u16,
    0x8c0'u16, 0x9c9'u16, 0xac3'u16, 0xbca'u16, 0xcc6'u16, 0xdcf'u16, 0xec5'u16, 0xfcc'u16,
    0x0cc'u16, 0x1c5'u16, 0x2cf'u16, 0x3c6'u16, 0x4ca'u16, 0x5c3'u16, 0x6c9'u16, 0x7c0'u16,
    0x950'u16, 0x859'u16, 0xb53'u16, 0xa5a'u16, 0xd56'u16, 0xc5f'u16, 0xf55'u16, 0xe5c'u16,
    0x15c'u16,  0x55'u16, 0x35f'u16, 0x256'u16, 0x55a'u16, 0x453'u16, 0x759'u16, 0x650'u16,
    0xaf0'u16, 0xbf9'u16, 0x8f3'u16, 0x9fa'u16, 0xef6'u16, 0xfff'u16, 0xcf5'u16, 0xdfc'u16,
    0x2fc'u16, 0x3f5'u16, 0x0ff'u16, 0x1f6'u16, 0x6fa'u16, 0x7f3'u16, 0x4f9'u16, 0x5f0'u16,
    0xb60'u16, 0xa69'u16, 0x963'u16, 0x86a'u16, 0xf66'u16, 0xe6f'u16, 0xd65'u16, 0xc6c'u16,
    0x36c'u16, 0x265'u16, 0x16f'u16, 0x066'u16, 0x76a'u16, 0x663'u16, 0x569'u16, 0x460'u16,
    0xca0'u16, 0xda9'u16, 0xea3'u16, 0xfaa'u16, 0x8a6'u16, 0x9af'u16, 0xaa5'u16, 0xbac'u16,
    0x4ac'u16, 0x5a5'u16, 0x6af'u16, 0x7a6'u16, 0x0aa'u16, 0x1a3'u16, 0x2a9'u16, 0x3a0'u16,
    0xd30'u16, 0xc39'u16, 0xf33'u16, 0xe3a'u16, 0x936'u16, 0x83f'u16, 0xb35'u16, 0xa3c'u16,
    0x53c'u16, 0x435'u16, 0x73f'u16, 0x636'u16, 0x13a'u16, 0x033'u16, 0x339'u16, 0x230'u16,
    0xe90'u16, 0xf99'u16, 0xc93'u16, 0xd9a'u16, 0xa96'u16, 0xb9f'u16, 0x895'u16, 0x99c'u16,
    0x69c'u16, 0x795'u16, 0x49f'u16, 0x596'u16, 0x29a'u16, 0x393'u16, 0x099'u16, 0x190'u16,
    0xf00'u16, 0xe09'u16, 0xd03'u16, 0xc0a'u16, 0xb06'u16, 0xa0f'u16, 0x905'u16, 0x80c'u16,
    0x70c'u16, 0x605'u16, 0x50f'u16, 0x406'u16, 0x30a'u16, 0x203'u16, 0x109'u16, 0x000'u16]

let s_indices: array[256, array[16, int8]] = [
    [  -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  8'i8,  3'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  1'i8,  9'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  8'i8,  3'i8,  9'i8,  8'i8,  1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  2'i8, 10'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  8'i8,  3'i8,  1'i8,  2'i8, 10'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  2'i8, 10'i8,  0'i8,  2'i8,  9'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   2'i8,  8'i8,  3'i8,  2'i8, 10'i8,  8'i8, 10'i8,  9'i8,  8'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   3'i8, 11'i8,  2'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8, 11'i8,  2'i8,  8'i8, 11'i8,  0'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  9'i8,  0'i8,  2'i8,  3'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8, 11'i8,  2'i8,  1'i8,  9'i8, 11'i8,  9'i8,  8'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   3'i8, 10'i8,  1'i8, 11'i8, 10'i8,  3'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8, 10'i8,  1'i8,  0'i8,  8'i8, 10'i8,  8'i8, 11'i8, 10'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   3'i8,  9'i8,  0'i8,  3'i8, 11'i8,  9'i8, 11'i8, 10'i8,  9'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  8'i8, 10'i8, 10'i8,  8'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   4'i8,  7'i8,  8'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   4'i8,  3'i8,  0'i8,  7'i8,  3'i8,  4'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  1'i8,  9'i8,  8'i8,  4'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   4'i8,  1'i8,  9'i8,  4'i8,  7'i8,  1'i8,  7'i8,  3'i8,  1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  2'i8, 10'i8,  8'i8,  4'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   3'i8,  4'i8,  7'i8,  3'i8,  0'i8,  4'i8,  1'i8,  2'i8, 10'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  2'i8, 10'i8,  9'i8,  0'i8,  2'i8,  8'i8,  4'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   2'i8, 10'i8,  9'i8,  2'i8,  9'i8,  7'i8,  2'i8,  7'i8,  3'i8,  7'i8,  9'i8,  4'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   8'i8,  4'i8,  7'i8,  3'i8, 11'i8,  2'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  11'i8,  4'i8,  7'i8, 11'i8,  2'i8,  4'i8,  2'i8,  0'i8,  4'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  0'i8,  1'i8,  8'i8,  4'i8,  7'i8,  2'i8,  3'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   4'i8,  7'i8, 11'i8,  9'i8,  4'i8, 11'i8,  9'i8, 11'i8,  2'i8,  9'i8,  2'i8,  1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   3'i8, 10'i8,  1'i8,  3'i8, 11'i8, 10'i8,  7'i8,  8'i8,  4'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8, 11'i8, 10'i8,  1'i8,  4'i8, 11'i8,  1'i8,  0'i8,  4'i8,  7'i8, 11'i8,  4'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   4'i8,  7'i8,  8'i8,  9'i8,  0'i8, 11'i8,  9'i8, 11'i8, 10'i8, 11'i8,  0'i8,  3'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   4'i8,  7'i8, 11'i8,  4'i8, 11'i8,  9'i8,  9'i8, 11'i8, 10'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  5'i8,  4'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  5'i8,  4'i8,  0'i8,  8'i8,  3'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  5'i8,  4'i8,  1'i8,  5'i8,  0'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   8'i8,  5'i8,  4'i8,  8'i8,  3'i8,  5'i8,  3'i8,  1'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  2'i8, 10'i8,  9'i8,  5'i8,  4'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   3'i8,  0'i8,  8'i8,  1'i8,  2'i8, 10'i8,  4'i8,  9'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   5'i8,  2'i8, 10'i8,  5'i8,  4'i8,  2'i8,  4'i8,  0'i8,  2'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   2'i8, 10'i8,  5'i8,  3'i8,  2'i8,  5'i8,  3'i8,  5'i8,  4'i8,  3'i8,  4'i8,  8'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  5'i8,  4'i8,  2'i8,  3'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8, 11'i8,  2'i8,  0'i8,  8'i8, 11'i8,  4'i8,  9'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  5'i8,  4'i8,  0'i8,  1'i8,  5'i8,  2'i8,  3'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   2'i8,  1'i8,  5'i8,  2'i8,  5'i8,  8'i8,  2'i8,  8'i8, 11'i8,  4'i8,  8'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  10'i8,  3'i8, 11'i8, 10'i8,  1'i8,  3'i8,  9'i8,  5'i8,  4'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   4'i8,  9'i8,  5'i8,  0'i8,  8'i8,  1'i8,  8'i8, 10'i8,  1'i8,  8'i8, 11'i8, 10'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   5'i8,  4'i8,  0'i8,  5'i8,  0'i8, 11'i8,  5'i8, 11'i8, 10'i8, 11'i8,  0'i8,  3'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   5'i8,  4'i8,  8'i8,  5'i8,  8'i8, 10'i8, 10'i8,  8'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  7'i8,  8'i8,  5'i8,  7'i8,  9'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  3'i8,  0'i8,  9'i8,  5'i8,  3'i8,  5'i8,  7'i8,  3'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  7'i8,  8'i8,  0'i8,  1'i8,  7'i8,  1'i8,  5'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  5'i8,  3'i8,  3'i8,  5'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  7'i8,  8'i8,  9'i8,  5'i8,  7'i8, 10'i8,  1'i8,  2'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  10'i8,  1'i8,  2'i8,  9'i8,  5'i8,  0'i8,  5'i8,  3'i8,  0'i8,  5'i8,  7'i8,  3'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   8'i8,  0'i8,  2'i8,  8'i8,  2'i8,  5'i8,  8'i8,  5'i8,  7'i8, 10'i8,  5'i8,  2'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   2'i8, 10'i8,  5'i8,  2'i8,  5'i8,  3'i8,  3'i8,  5'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   7'i8,  9'i8,  5'i8,  7'i8,  8'i8,  9'i8,  3'i8, 11'i8,  2'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  5'i8,  7'i8,  9'i8,  7'i8,  2'i8,  9'i8,  2'i8,  0'i8,  2'i8,  7'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   2'i8,  3'i8, 11'i8,  0'i8,  1'i8,  8'i8,  1'i8,  7'i8,  8'i8,  1'i8,  5'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  11'i8,  2'i8,  1'i8, 11'i8,  1'i8,  7'i8,  7'i8,  1'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  5'i8,  8'i8,  8'i8,  5'i8,  7'i8, 10'i8,  1'i8,  3'i8, 10'i8,  3'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   5'i8,  7'i8,  0'i8,  5'i8,  0'i8,  9'i8,  7'i8, 11'i8,  0'i8,  1'i8,  0'i8, 10'i8, 11'i8, 10'i8,  0'i8, -1'i8 ],
    [  11'i8, 10'i8,  0'i8, 11'i8,  0'i8,  3'i8, 10'i8,  5'i8,  0'i8,  8'i8,  0'i8,  7'i8,  5'i8,  7'i8,  0'i8, -1'i8 ],
    [  11'i8, 10'i8,  5'i8,  7'i8, 11'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  10'i8,  6'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  8'i8,  3'i8,  5'i8, 10'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  0'i8,  1'i8,  5'i8, 10'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  8'i8,  3'i8,  1'i8,  9'i8,  8'i8,  5'i8, 10'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  6'i8,  5'i8,  2'i8,  6'i8,  1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  6'i8,  5'i8,  1'i8,  2'i8,  6'i8,  3'i8,  0'i8,  8'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  6'i8,  5'i8,  9'i8,  0'i8,  6'i8,  0'i8,  2'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   5'i8,  9'i8,  8'i8,  5'i8,  8'i8,  2'i8,  5'i8,  2'i8,  6'i8,  3'i8,  2'i8,  8'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   2'i8,  3'i8, 11'i8, 10'i8,  6'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  11'i8,  0'i8,  8'i8, 11'i8,  2'i8,  0'i8, 10'i8,  6'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  1'i8,  9'i8,  2'i8,  3'i8, 11'i8,  5'i8, 10'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   5'i8, 10'i8,  6'i8,  1'i8,  9'i8,  2'i8,  9'i8, 11'i8,  2'i8,  9'i8,  8'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   6'i8,  3'i8, 11'i8,  6'i8,  5'i8,  3'i8,  5'i8,  1'i8,  3'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  8'i8, 11'i8,  0'i8, 11'i8,  5'i8,  0'i8,  5'i8,  1'i8,  5'i8, 11'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   3'i8, 11'i8,  6'i8,  0'i8,  3'i8,  6'i8,  0'i8,  6'i8,  5'i8,  0'i8,  5'i8,  9'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   6'i8,  5'i8,  9'i8,  6'i8,  9'i8, 11'i8, 11'i8,  9'i8,  8'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   5'i8, 10'i8,  6'i8,  4'i8,  7'i8,  8'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   4'i8,  3'i8,  0'i8,  4'i8,  7'i8,  3'i8,  6'i8,  5'i8, 10'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  9'i8,  0'i8,  5'i8, 10'i8,  6'i8,  8'i8,  4'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  10'i8,  6'i8,  5'i8,  1'i8,  9'i8,  7'i8,  1'i8,  7'i8,  3'i8,  7'i8,  9'i8,  4'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   6'i8,  1'i8,  2'i8,  6'i8,  5'i8,  1'i8,  4'i8,  7'i8,  8'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  2'i8,  5'i8,  5'i8,  2'i8,  6'i8,  3'i8,  0'i8,  4'i8,  3'i8,  4'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   8'i8,  4'i8,  7'i8,  9'i8,  0'i8,  5'i8,  0'i8,  6'i8,  5'i8,  0'i8,  2'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   7'i8,  3'i8,  9'i8,  7'i8,  9'i8,  4'i8,  3'i8,  2'i8,  9'i8,  5'i8,  9'i8,  6'i8,  2'i8,  6'i8,  9'i8, -1'i8 ],
    [   3'i8, 11'i8,  2'i8,  7'i8,  8'i8,  4'i8, 10'i8,  6'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   5'i8, 10'i8,  6'i8,  4'i8,  7'i8,  2'i8,  4'i8,  2'i8,  0'i8,  2'i8,  7'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  1'i8,  9'i8,  4'i8,  7'i8,  8'i8,  2'i8,  3'i8, 11'i8,  5'i8, 10'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  2'i8,  1'i8,  9'i8, 11'i8,  2'i8,  9'i8,  4'i8, 11'i8,  7'i8, 11'i8,  4'i8,  5'i8, 10'i8,  6'i8, -1'i8 ],
    [   8'i8,  4'i8,  7'i8,  3'i8, 11'i8,  5'i8,  3'i8,  5'i8,  1'i8,  5'i8, 11'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   5'i8,  1'i8, 11'i8,  5'i8, 11'i8,  6'i8,  1'i8,  0'i8, 11'i8,  7'i8, 11'i8,  4'i8,  0'i8,  4'i8, 11'i8, -1'i8 ],
    [   0'i8,  5'i8,  9'i8,  0'i8,  6'i8,  5'i8,  0'i8,  3'i8,  6'i8, 11'i8,  6'i8,  3'i8,  8'i8,  4'i8,  7'i8, -1'i8 ],
    [   6'i8,  5'i8,  9'i8,  6'i8,  9'i8, 11'i8,  4'i8,  7'i8,  9'i8,  7'i8, 11'i8,  9'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  10'i8,  4'i8,  9'i8,  6'i8,  4'i8, 10'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   4'i8, 10'i8,  6'i8,  4'i8,  9'i8, 10'i8,  0'i8,  8'i8,  3'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  10'i8,  0'i8,  1'i8, 10'i8,  6'i8,  0'i8,  6'i8,  4'i8,  0'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   8'i8,  3'i8,  1'i8,  8'i8,  1'i8,  6'i8,  8'i8,  6'i8,  4'i8,  6'i8,  1'i8, 10'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  4'i8,  9'i8,  1'i8,  2'i8,  4'i8,  2'i8,  6'i8,  4'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   3'i8,  0'i8,  8'i8,  1'i8,  2'i8,  9'i8,  2'i8,  4'i8,  9'i8,  2'i8,  6'i8,  4'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  2'i8,  4'i8,  4'i8,  2'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   8'i8,  3'i8,  2'i8,  8'i8,  2'i8,  4'i8,  4'i8,  2'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  10'i8,  4'i8,  9'i8, 10'i8,  6'i8,  4'i8, 11'i8,  2'i8,  3'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  8'i8,  2'i8,  2'i8,  8'i8, 11'i8,  4'i8,  9'i8, 10'i8,  4'i8, 10'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   3'i8, 11'i8,  2'i8,  0'i8,  1'i8,  6'i8,  0'i8,  6'i8,  4'i8,  6'i8,  1'i8, 10'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   6'i8,  4'i8,  1'i8,  6'i8,  1'i8, 10'i8,  4'i8,  8'i8,  1'i8,  2'i8,  1'i8, 11'i8,  8'i8, 11'i8,  1'i8, -1'i8 ],
    [   9'i8,  6'i8,  4'i8,  9'i8,  3'i8,  6'i8,  9'i8,  1'i8,  3'i8, 11'i8,  6'i8,  3'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   8'i8, 11'i8,  1'i8,  8'i8,  1'i8,  0'i8, 11'i8,  6'i8,  1'i8,  9'i8,  1'i8,  4'i8,  6'i8,  4'i8,  1'i8, -1'i8 ],
    [   3'i8, 11'i8,  6'i8,  3'i8,  6'i8,  0'i8,  0'i8,  6'i8,  4'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   6'i8,  4'i8,  8'i8, 11'i8,  6'i8,  8'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   7'i8, 10'i8,  6'i8,  7'i8,  8'i8, 10'i8,  8'i8,  9'i8, 10'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  7'i8,  3'i8,  0'i8, 10'i8,  7'i8,  0'i8,  9'i8, 10'i8,  6'i8,  7'i8, 10'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  10'i8,  6'i8,  7'i8,  1'i8, 10'i8,  7'i8,  1'i8,  7'i8,  8'i8,  1'i8,  8'i8,  0'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  10'i8,  6'i8,  7'i8, 10'i8,  7'i8,  1'i8,  1'i8,  7'i8,  3'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  2'i8,  6'i8,  1'i8,  6'i8,  8'i8,  1'i8,  8'i8,  9'i8,  8'i8,  6'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   2'i8,  6'i8,  9'i8,  2'i8,  9'i8,  1'i8,  6'i8,  7'i8,  9'i8,  0'i8,  9'i8,  3'i8,  7'i8,  3'i8,  9'i8, -1'i8 ],
    [   7'i8,  8'i8,  0'i8,  7'i8,  0'i8,  6'i8,  6'i8,  0'i8,  2'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   7'i8,  3'i8,  2'i8,  6'i8,  7'i8,  2'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   2'i8,  3'i8, 11'i8, 10'i8,  6'i8,  8'i8, 10'i8,  8'i8,  9'i8,  8'i8,  6'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   2'i8,  0'i8,  7'i8,  2'i8,  7'i8, 11'i8,  0'i8,  9'i8,  7'i8,  6'i8,  7'i8, 10'i8,  9'i8, 10'i8,  7'i8, -1'i8 ],
    [   1'i8,  8'i8,  0'i8,  1'i8,  7'i8,  8'i8,  1'i8, 10'i8,  7'i8,  6'i8,  7'i8, 10'i8,  2'i8,  3'i8, 11'i8, -1'i8 ],
    [  11'i8,  2'i8,  1'i8, 11'i8,  1'i8,  7'i8, 10'i8,  6'i8,  1'i8,  6'i8,  7'i8,  1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   8'i8,  9'i8,  6'i8,  8'i8,  6'i8,  7'i8,  9'i8,  1'i8,  6'i8, 11'i8,  6'i8,  3'i8,  1'i8,  3'i8,  6'i8, -1'i8 ],
    [   0'i8,  9'i8,  1'i8, 11'i8,  6'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   7'i8,  8'i8,  0'i8,  7'i8,  0'i8,  6'i8,  3'i8, 11'i8,  0'i8, 11'i8,  6'i8,  0'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   7'i8, 11'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   7'i8,  6'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   3'i8,  0'i8,  8'i8, 11'i8,  7'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  1'i8,  9'i8, 11'i8,  7'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   8'i8,  1'i8,  9'i8,  8'i8,  3'i8,  1'i8, 11'i8,  7'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  10'i8,  1'i8,  2'i8,  6'i8, 11'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  2'i8, 10'i8,  3'i8,  0'i8,  8'i8,  6'i8, 11'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   2'i8,  9'i8,  0'i8,  2'i8, 10'i8,  9'i8,  6'i8, 11'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   6'i8, 11'i8,  7'i8,  2'i8, 10'i8,  3'i8, 10'i8,  8'i8,  3'i8, 10'i8,  9'i8,  8'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   7'i8,  2'i8,  3'i8,  6'i8,  2'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   7'i8,  0'i8,  8'i8,  7'i8,  6'i8,  0'i8,  6'i8,  2'i8,  0'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   2'i8,  7'i8,  6'i8,  2'i8,  3'i8,  7'i8,  0'i8,  1'i8,  9'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  6'i8,  2'i8,  1'i8,  8'i8,  6'i8,  1'i8,  9'i8,  8'i8,  8'i8,  7'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  10'i8,  7'i8,  6'i8, 10'i8,  1'i8,  7'i8,  1'i8,  3'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  10'i8,  7'i8,  6'i8,  1'i8,  7'i8, 10'i8,  1'i8,  8'i8,  7'i8,  1'i8,  0'i8,  8'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  3'i8,  7'i8,  0'i8,  7'i8, 10'i8,  0'i8, 10'i8,  9'i8,  6'i8, 10'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   7'i8,  6'i8, 10'i8,  7'i8, 10'i8,  8'i8,  8'i8, 10'i8,  9'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   6'i8,  8'i8,  4'i8, 11'i8,  8'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   3'i8,  6'i8, 11'i8,  3'i8,  0'i8,  6'i8,  0'i8,  4'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   8'i8,  6'i8, 11'i8,  8'i8,  4'i8,  6'i8,  9'i8,  0'i8,  1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  4'i8,  6'i8,  9'i8,  6'i8,  3'i8,  9'i8,  3'i8,  1'i8, 11'i8,  3'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   6'i8,  8'i8,  4'i8,  6'i8, 11'i8,  8'i8,  2'i8, 10'i8,  1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  2'i8, 10'i8,  3'i8,  0'i8, 11'i8,  0'i8,  6'i8, 11'i8,  0'i8,  4'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   4'i8, 11'i8,  8'i8,  4'i8,  6'i8, 11'i8,  0'i8,  2'i8,  9'i8,  2'i8, 10'i8,  9'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  10'i8,  9'i8,  3'i8, 10'i8,  3'i8,  2'i8,  9'i8,  4'i8,  3'i8, 11'i8,  3'i8,  6'i8,  4'i8,  6'i8,  3'i8, -1'i8 ],
    [   8'i8,  2'i8,  3'i8,  8'i8,  4'i8,  2'i8,  4'i8,  6'i8,  2'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  4'i8,  2'i8,  4'i8,  6'i8,  2'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  9'i8,  0'i8,  2'i8,  3'i8,  4'i8,  2'i8,  4'i8,  6'i8,  4'i8,  3'i8,  8'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  9'i8,  4'i8,  1'i8,  4'i8,  2'i8,  2'i8,  4'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   8'i8,  1'i8,  3'i8,  8'i8,  6'i8,  1'i8,  8'i8,  4'i8,  6'i8,  6'i8, 10'i8,  1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  10'i8,  1'i8,  0'i8, 10'i8,  0'i8,  6'i8,  6'i8,  0'i8,  4'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   4'i8,  6'i8,  3'i8,  4'i8,  3'i8,  8'i8,  6'i8, 10'i8,  3'i8,  0'i8,  3'i8,  9'i8, 10'i8,  9'i8,  3'i8, -1'i8 ],
    [  10'i8,  9'i8,  4'i8,  6'i8, 10'i8,  4'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   4'i8,  9'i8,  5'i8,  7'i8,  6'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  8'i8,  3'i8,  4'i8,  9'i8,  5'i8, 11'i8,  7'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   5'i8,  0'i8,  1'i8,  5'i8,  4'i8,  0'i8,  7'i8,  6'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  11'i8,  7'i8,  6'i8,  8'i8,  3'i8,  4'i8,  3'i8,  5'i8,  4'i8,  3'i8,  1'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  5'i8,  4'i8, 10'i8,  1'i8,  2'i8,  7'i8,  6'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   6'i8, 11'i8,  7'i8,  1'i8,  2'i8, 10'i8,  0'i8,  8'i8,  3'i8,  4'i8,  9'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   7'i8,  6'i8, 11'i8,  5'i8,  4'i8, 10'i8,  4'i8,  2'i8, 10'i8,  4'i8,  0'i8,  2'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   3'i8,  4'i8,  8'i8,  3'i8,  5'i8,  4'i8,  3'i8,  2'i8,  5'i8, 10'i8,  5'i8,  2'i8, 11'i8,  7'i8,  6'i8, -1'i8 ],
    [   7'i8,  2'i8,  3'i8,  7'i8,  6'i8,  2'i8,  5'i8,  4'i8,  9'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  5'i8,  4'i8,  0'i8,  8'i8,  6'i8,  0'i8,  6'i8,  2'i8,  6'i8,  8'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   3'i8,  6'i8,  2'i8,  3'i8,  7'i8,  6'i8,  1'i8,  5'i8,  0'i8,  5'i8,  4'i8,  0'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   6'i8,  2'i8,  8'i8,  6'i8,  8'i8,  7'i8,  2'i8,  1'i8,  8'i8,  4'i8,  8'i8,  5'i8,  1'i8,  5'i8,  8'i8, -1'i8 ],
    [   9'i8,  5'i8,  4'i8, 10'i8,  1'i8,  6'i8,  1'i8,  7'i8,  6'i8,  1'i8,  3'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  6'i8, 10'i8,  1'i8,  7'i8,  6'i8,  1'i8,  0'i8,  7'i8,  8'i8,  7'i8,  0'i8,  9'i8,  5'i8,  4'i8, -1'i8 ],
    [   4'i8,  0'i8, 10'i8,  4'i8, 10'i8,  5'i8,  0'i8,  3'i8, 10'i8,  6'i8, 10'i8,  7'i8,  3'i8,  7'i8, 10'i8, -1'i8 ],
    [   7'i8,  6'i8, 10'i8,  7'i8, 10'i8,  8'i8,  5'i8,  4'i8, 10'i8,  4'i8,  8'i8, 10'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   6'i8,  9'i8,  5'i8,  6'i8, 11'i8,  9'i8, 11'i8,  8'i8,  9'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   3'i8,  6'i8, 11'i8,  0'i8,  6'i8,  3'i8,  0'i8,  5'i8,  6'i8,  0'i8,  9'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8, 11'i8,  8'i8,  0'i8,  5'i8, 11'i8,  0'i8,  1'i8,  5'i8,  5'i8,  6'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   6'i8, 11'i8,  3'i8,  6'i8,  3'i8,  5'i8,  5'i8,  3'i8,  1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  2'i8, 10'i8,  9'i8,  5'i8, 11'i8,  9'i8, 11'i8,  8'i8, 11'i8,  5'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8, 11'i8,  3'i8,  0'i8,  6'i8, 11'i8,  0'i8,  9'i8,  6'i8,  5'i8,  6'i8,  9'i8,  1'i8,  2'i8, 10'i8, -1'i8 ],
    [  11'i8,  8'i8,  5'i8, 11'i8,  5'i8,  6'i8,  8'i8,  0'i8,  5'i8, 10'i8,  5'i8,  2'i8,  0'i8,  2'i8,  5'i8, -1'i8 ],
    [   6'i8, 11'i8,  3'i8,  6'i8,  3'i8,  5'i8,  2'i8, 10'i8,  3'i8, 10'i8,  5'i8,  3'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   5'i8,  8'i8,  9'i8,  5'i8,  2'i8,  8'i8,  5'i8,  6'i8,  2'i8,  3'i8,  8'i8,  2'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  5'i8,  6'i8,  9'i8,  6'i8,  0'i8,  0'i8,  6'i8,  2'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  5'i8,  8'i8,  1'i8,  8'i8,  0'i8,  5'i8,  6'i8,  8'i8,  3'i8,  8'i8,  2'i8,  6'i8,  2'i8,  8'i8, -1'i8 ],
    [   1'i8,  5'i8,  6'i8,  2'i8,  1'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  3'i8,  6'i8,  1'i8,  6'i8, 10'i8,  3'i8,  8'i8,  6'i8,  5'i8,  6'i8,  9'i8,  8'i8,  9'i8,  6'i8, -1'i8 ],
    [  10'i8,  1'i8,  0'i8, 10'i8,  0'i8,  6'i8,  9'i8,  5'i8,  0'i8,  5'i8,  6'i8,  0'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  3'i8,  8'i8,  5'i8,  6'i8, 10'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  10'i8,  5'i8,  6'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  11'i8,  5'i8, 10'i8,  7'i8,  5'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  11'i8,  5'i8, 10'i8, 11'i8,  7'i8,  5'i8,  8'i8,  3'i8,  0'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   5'i8, 11'i8,  7'i8,  5'i8, 10'i8, 11'i8,  1'i8,  9'i8,  0'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  10'i8,  7'i8,  5'i8, 10'i8, 11'i8,  7'i8,  9'i8,  8'i8,  1'i8,  8'i8,  3'i8,  1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  11'i8,  1'i8,  2'i8, 11'i8,  7'i8,  1'i8,  7'i8,  5'i8,  1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  8'i8,  3'i8,  1'i8,  2'i8,  7'i8,  1'i8,  7'i8,  5'i8,  7'i8,  2'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  7'i8,  5'i8,  9'i8,  2'i8,  7'i8,  9'i8,  0'i8,  2'i8,  2'i8, 11'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   7'i8,  5'i8,  2'i8,  7'i8,  2'i8, 11'i8,  5'i8,  9'i8,  2'i8,  3'i8,  2'i8,  8'i8,  9'i8,  8'i8,  2'i8, -1'i8 ],
    [   2'i8,  5'i8, 10'i8,  2'i8,  3'i8,  5'i8,  3'i8,  7'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   8'i8,  2'i8,  0'i8,  8'i8,  5'i8,  2'i8,  8'i8,  7'i8,  5'i8, 10'i8,  2'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  0'i8,  1'i8,  5'i8, 10'i8,  3'i8,  5'i8,  3'i8,  7'i8,  3'i8, 10'i8,  2'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  8'i8,  2'i8,  9'i8,  2'i8,  1'i8,  8'i8,  7'i8,  2'i8, 10'i8,  2'i8,  5'i8,  7'i8,  5'i8,  2'i8, -1'i8 ],
    [   1'i8,  3'i8,  5'i8,  3'i8,  7'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  8'i8,  7'i8,  0'i8,  7'i8,  1'i8,  1'i8,  7'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  0'i8,  3'i8,  9'i8,  3'i8,  5'i8,  5'i8,  3'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  8'i8,  7'i8,  5'i8,  9'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   5'i8,  8'i8,  4'i8,  5'i8, 10'i8,  8'i8, 10'i8, 11'i8,  8'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   5'i8,  0'i8,  4'i8,  5'i8, 11'i8,  0'i8,  5'i8, 10'i8, 11'i8, 11'i8,  3'i8,  0'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  1'i8,  9'i8,  8'i8,  4'i8, 10'i8,  8'i8, 10'i8, 11'i8, 10'i8,  4'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  10'i8, 11'i8,  4'i8, 10'i8,  4'i8,  5'i8, 11'i8,  3'i8,  4'i8,  9'i8,  4'i8,  1'i8,  3'i8,  1'i8,  4'i8, -1'i8 ],
    [   2'i8,  5'i8,  1'i8,  2'i8,  8'i8,  5'i8,  2'i8, 11'i8,  8'i8,  4'i8,  5'i8,  8'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  4'i8, 11'i8,  0'i8, 11'i8,  3'i8,  4'i8,  5'i8, 11'i8,  2'i8, 11'i8,  1'i8,  5'i8,  1'i8, 11'i8, -1'i8 ],
    [   0'i8,  2'i8,  5'i8,  0'i8,  5'i8,  9'i8,  2'i8, 11'i8,  5'i8,  4'i8,  5'i8,  8'i8, 11'i8,  8'i8,  5'i8, -1'i8 ],
    [   9'i8,  4'i8,  5'i8,  2'i8, 11'i8,  3'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   2'i8,  5'i8, 10'i8,  3'i8,  5'i8,  2'i8,  3'i8,  4'i8,  5'i8,  3'i8,  8'i8,  4'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   5'i8, 10'i8,  2'i8,  5'i8,  2'i8,  4'i8,  4'i8,  2'i8,  0'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   3'i8, 10'i8,  2'i8,  3'i8,  5'i8, 10'i8,  3'i8,  8'i8,  5'i8,  4'i8,  5'i8,  8'i8,  0'i8,  1'i8,  9'i8, -1'i8 ],
    [   5'i8, 10'i8,  2'i8,  5'i8,  2'i8,  4'i8,  1'i8,  9'i8,  2'i8,  9'i8,  4'i8,  2'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   8'i8,  4'i8,  5'i8,  8'i8,  5'i8,  3'i8,  3'i8,  5'i8,  1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  4'i8,  5'i8,  1'i8,  0'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   8'i8,  4'i8,  5'i8,  8'i8,  5'i8,  3'i8,  9'i8,  0'i8,  5'i8,  0'i8,  3'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  4'i8,  5'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   4'i8, 11'i8,  7'i8,  4'i8,  9'i8, 11'i8,  9'i8, 10'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  8'i8,  3'i8,  4'i8,  9'i8,  7'i8,  9'i8, 11'i8,  7'i8,  9'i8, 10'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8, 10'i8, 11'i8,  1'i8, 11'i8,  4'i8,  1'i8,  4'i8,  0'i8,  7'i8,  4'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   3'i8,  1'i8,  4'i8,  3'i8,  4'i8,  8'i8,  1'i8, 10'i8,  4'i8,  7'i8,  4'i8, 11'i8, 10'i8, 11'i8,  4'i8, -1'i8 ],
    [   4'i8, 11'i8,  7'i8,  9'i8, 11'i8,  4'i8,  9'i8,  2'i8, 11'i8,  9'i8,  1'i8,  2'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8,  7'i8,  4'i8,  9'i8, 11'i8,  7'i8,  9'i8,  1'i8, 11'i8,  2'i8, 11'i8,  1'i8,  0'i8,  8'i8,  3'i8, -1'i8 ],
    [  11'i8,  7'i8,  4'i8, 11'i8,  4'i8,  2'i8,  2'i8,  4'i8,  0'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  11'i8,  7'i8,  4'i8, 11'i8,  4'i8,  2'i8,  8'i8,  3'i8,  4'i8,  3'i8,  2'i8,  4'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   2'i8,  9'i8, 10'i8,  2'i8,  7'i8,  9'i8,  2'i8,  3'i8,  7'i8,  7'i8,  4'i8,  9'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8, 10'i8,  7'i8,  9'i8,  7'i8,  4'i8, 10'i8,  2'i8,  7'i8,  8'i8,  7'i8,  0'i8,  2'i8,  0'i8,  7'i8, -1'i8 ],
    [   3'i8,  7'i8, 10'i8,  3'i8, 10'i8,  2'i8,  7'i8,  4'i8, 10'i8,  1'i8, 10'i8,  0'i8,  4'i8,  0'i8, 10'i8, -1'i8 ],
    [   1'i8, 10'i8,  2'i8,  8'i8,  7'i8,  4'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   4'i8,  9'i8,  1'i8,  4'i8,  1'i8,  7'i8,  7'i8,  1'i8,  3'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   4'i8,  9'i8,  1'i8,  4'i8,  1'i8,  7'i8,  0'i8,  8'i8,  1'i8,  8'i8,  7'i8,  1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   4'i8,  0'i8,  3'i8,  7'i8,  4'i8,  3'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   4'i8,  8'i8,  7'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8, 10'i8,  8'i8, 10'i8, 11'i8,  8'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   3'i8,  0'i8,  9'i8,  3'i8,  9'i8, 11'i8, 11'i8,  9'i8, 10'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  1'i8, 10'i8,  0'i8, 10'i8,  8'i8,  8'i8, 10'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   3'i8,  1'i8, 10'i8, 11'i8,  3'i8, 10'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  2'i8, 11'i8,  1'i8, 11'i8,  9'i8,  9'i8, 11'i8,  8'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   3'i8,  0'i8,  9'i8,  3'i8,  9'i8, 11'i8,  1'i8,  2'i8,  9'i8,  2'i8, 11'i8,  9'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  2'i8, 11'i8,  8'i8,  0'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   3'i8,  2'i8, 11'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   2'i8,  3'i8,  8'i8,  2'i8,  8'i8, 10'i8, 10'i8,  8'i8,  9'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   9'i8, 10'i8,  2'i8,  0'i8,  9'i8,  2'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   2'i8,  3'i8,  8'i8,  2'i8,  8'i8, 10'i8,  0'i8,  1'i8,  8'i8,  1'i8, 10'i8,  8'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8, 10'i8,  2'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   1'i8,  3'i8,  8'i8,  9'i8,  1'i8,  8'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  9'i8,  1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [   0'i8,  3'i8,  8'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ],
    [  -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8, -1'i8 ]]

let s_cube: array[8, Vec3] = [
    [ 0.0f32, 1.0f32, 1.0f32 ], # 0
    [ 1.0f32, 1.0f32, 1.0f32 ], # 1
    [ 1.0f32, 1.0f32, 0.0f32 ], # 2
    [ 0.0f32, 1.0f32, 0.0f32 ], # 3
    [ 0.0f32, 0.0f32, 1.0f32 ], # 4
    [ 1.0f32, 0.0f32, 1.0f32 ], # 5
    [ 1.0f32, 0.0f32, 0.0f32 ], # 6
    [ 0.0f32, 0.0f32, 0.0f32 ]] # 7

proc vertLerp(vertices: var Vec3, iso: float32, idx0: uint32, v0: float32, idx1: uint32, v1: float32): float32 =
    let edge0 = s_cube[idx0]
    let edge1 = s_cube[idx1]

    const c_epsilon = 1e-05

    if fpumath.fabsolute(iso-v1) < c_epsilon:
        vertices[0] = edge1[0]
        vertices[1] = edge1[1]
        vertices[2] = edge1[2]
        return 1.0'f32

    if fpumath.fabsolute(iso-v0) < c_epsilon or fpumath.fabsolute(v0-v1) < c_epsilon:
        vertices[0] = edge0[0]
        vertices[1] = edge0[1]
        vertices[2] = edge0[2]
        return 0.0'f32

    let lerp = (iso-v0)/(v1-v0)
    vertices[0] = edge0[0]+lerp*(edge1[0]-edge0[0])
    vertices[1] = edge0[1]+lerp*(edge1[1]-edge0[1])
    vertices[2] = edge0[2]+lerp*(edge1[2]-edge0[2])
    return lerp

proc triangulate*(vert_result: var ptr PosNormalColorVertex; stride: int; rgb: array[6, float32];
                  xyz: Vec3; val: array[8, ptr Grid]; iso: float32): uint32 =
    var cubeindex: uint8 = 0
    cubeindex = cubeindex or (if (val[0].value < iso): 0x00000001 else: 0)
    cubeindex = cubeindex or (if (val[1].value < iso): 0x00000002 else: 0)
    cubeindex = cubeindex or (if (val[2].value < iso): 0x00000004 else: 0)
    cubeindex = cubeindex or (if (val[3].value < iso): 0x00000008 else: 0)
    cubeindex = cubeindex or (if (val[4].value < iso): 0x00000010 else: 0)
    cubeindex = cubeindex or (if (val[5].value < iso): 0x00000020 else: 0)
    cubeindex = cubeindex or (if (val[6].value < iso): 0x00000040 else: 0)
    cubeindex = cubeindex or (if (val[7].value < iso): 0x00000080 else: 0)
    if 0'u16 == s_edges[cubeindex]:
        return 0
    var verts: array[12, array[2, Vec3]]
    let flags: uint16 = s_edges[cubeindex]
    var ii: uint16 = 0'u16
    while ii < 12'u16:
        if (flags and (1'u16 shl ii)) == 1:
            let idx0: uint32 = ii and 7
            let idx1: uint32 = [
                0x00000001'u32, 0x00000002'u32, 0x00000003'u32, 0x00000000'u32,
                0x00000005'u32, 0x00000006'u32, 0x00000007'u32, 0x00000004'u32,
                0x00000004'u32, 0x00000005'u32, 0x00000006'u32, 0x00000007'u32][ii]
            let lerp: float32 = vertLerp(verts[ii][0], iso, idx0, val[idx0].value, idx1,
                                        val[idx1].value)
            let na: Vec3 = val[idx0].normal
            let nb: Vec3 = val[idx1].normal
            verts[ii][1][0] = na[0]+lerp*(nb[0]-na[0])
            verts[ii][1][1] = na[1]+lerp*(nb[1]-na[1])
            verts[ii][1][2] = na[2]+lerp*(nb[2]-na[2])
        ii = ii+1
    let dr: float32 = rgb[3]-rgb[0]
    let dg: float32 = rgb[4]-rgb[1]
    let db: float32 = rgb[5]-rgb[2]
    var num: uint32 = 0
    let indices: array[16, int8] = s_indices[cubeindex]
    ii = 0'u16
    while indices[ii] != -1'i8:
        let vertex = verts[indices[ii]]
        vert_result.position[0] = xyz[0]+vertex[0][0]
        vert_result.position[1] = xyz[1]+vertex[0][1]
        vert_result.position[2] = xyz[2]+vertex[0][2]
        vert_result.normal[0] = vertex[1][0]
        vert_result.normal[1] = vertex[1][1]
        vert_result.normal[2] = vertex[1][2]
        vert_result.abgr[0] = 0xff
        vert_result.abgr[1] = uint8((rgb[2]+vertex[0][2]*db)*255.0)
        vert_result.abgr[2] = uint8((rgb[1]+vertex[0][1]*dg)*255.0)
        vert_result.abgr[3] = uint8((rgb[0]+vertex[0][0]*dr)*255.0)
        vert_result = cast[ptr PosNormalColorVertex](cast[ByteAddress](vert_result)+stride)
        num = num+1
        ii = ii+1
    return num


var s_metaballVertices_Decl: ptr bgfx.VertexDecl

proc Start(self: ExampleMetaball) =

    let m_renderer_type = bgfx.RendererType.RendererType_Count
    let m_pciID = 0'u16

    self.m_width = 1280
    self.m_height = 1280
    self.m_debug = BGFX_DEBUG_TEXT # or BGFX_DEBUG_STATS
    self.m_reset =  BGFX_RESET_VSYNC

    # Separate Thread
    bgfx.Init(m_renderer_type, m_pciID, 0, nil, nil)
    bgfx.Reset(self.m_width, self.m_height, self.m_reset)

    # Enable Debug Text
    bgfx.SetDebug(self.m_debug)

    # Set view 0 clear state
    bgfx.SetViewClear(0, BGFX_CLEAR_COLOR or BGFX_CLEAR_DEPTH, 0x303030ff, 1.0, 0)

    s_metaballVertices_Decl = createShared(bgfx.VertexDecl)
    s_metaballVertices_Decl.Begin()
    s_metaballVertices_Decl.Add(bgfx.Attrib_Position, 3, bgfx.AttribType_Float)
    s_metaballVertices_Decl.Add(bgfx.Attrib_Normal, 3, bgfx.AttribType_Float)
    s_metaballVertices_Decl.Add(bgfx.Attrib_Color0, 4, bgfx.AttribType_Uint8, true)
    s_metaballVertices_Decl.End()

    var vertex_shader_data: seq[uint8]
    var fragment_shader_data: seq[uint8]

    case bgfx.GetRendererType()
    of bgfx.RendererType_Direct3D11, bgfx.RendererType_Direct3D12:
        vertex_shader_data = vs_metaballs["dx11"]
        fragment_shader_data = fs_metaballs["dx11"]
    of bgfx.RendererType_OpenGL:
        vertex_shader_data = vs_metaballs["glsl"]
        fragment_shader_data = fs_metaballs["glsl"]
    of bgfx.RendererType_Metal:
        vertex_shader_data = vs_metaballs["mtl"]
        fragment_shader_data = fs_metaballs["mtl"]
    of bgfx.RendererType_Vulkan:
        vertex_shader_data = vs_metaballs["spv"]
        fragment_shader_data = fs_metaballs["spv"]
    of bgfx.RendererType_Direct3D9:
        vertex_shader_data = vs_metaballs["dx9"]
        fragment_shader_data = fs_metaballs["dx9"]
    else:
        raise newException(SystemError, "Invalid bgfx renderer type")

    self.m_program = LoadProgram(vertex_shader_data, fragment_shader_data)
    self.m_timeOffset = GetTime() # This defers from the original


proc CleanUp(self: ExampleMetaball) =
    bgfx.DestroyProgram(self.m_program)
    bgfx.Shutdown()

proc Update(self: ExampleMetaball) =
    const y_pitch = DIMS
    const z_pitch = DIMS*DIMS
    const inv_dim = 1.0'f32/DIMS-1
    let stride = cast[int](s_metaballVertices_Decl.GetStride())

    # Set view 0 default viewport
    bgfx.SetViewRect(0, 0, 0, cast[uint16](self.m_width), cast[uint16](self.m_height))

    var now = GetTime()
    var last {.global.} = GetTime()
    let frameTime: float32 = now-last
    var time = GetTime()
    last = now
    const toMs = 1000.0'f64

    # Use debug font to print information about this example.
    bgfx.DebugTextClear()
    bgfx.DebugTextPrintf(0, 1, 0x4f, "nim-bgfx/examples/02-metaballs")
    bgfx.DebugTextPrintf(0, 2, 0x6f, "Description: Rendering with transient buffers and embedded shaders.")

    const at: Vec3  = [0.0'f32, 0.0'f32,   0.0'f32]
    const eye: Vec3 = [0.0'f32, 0.0'f32, -50.0'f32]

    let hmd = bgfx.GetHmd()
    if not hmd.isNil and (0'u8 != (hmd.flags and BGFX_HMD_RENDERING)):
        var view: Mat4
        fpumath.mtxQuatTranslationHMD(view, hmd.eye[0].rotation, eye)
        bgfx.SetViewTransform(0, unsafeAddr(view[0]), unsafeAddr(hmd.eye[0].projection[0]), BGFX_VIEW_STEREO, unsafeAddr(hmd.eye[1].projection[0]))

        bgfx.SetViewRect(0, 0, 0, hmd.width, hmd.height)
    else:
        var view: Mat4
        fpumath.mtxLookAt(view, eye, at)
        var proj: Mat4
        fpumath.mtxProj(proj, 60.0'f32, cast[float32](self.m_window_width)/cast[float32](self.m_window_height), 0.1'f32, 100.0'f32)
        bgfx.SetViewTransform(0, unsafeAddr(view[0]), unsafeAddr(proj[0]))

        bgfx.SetViewRect(0, 0, 0, cast[uint16](self.m_window_width), cast[uint16](self.m_window_height))

    bgfx.Touch(0)

    var num_vertices = 0
    var prof_update = 0'f64
    var prof_normal = 0'f64
    var prof_triangulate = 0'f64

    const max_vertices = 32 shl 10
    var tvb: bgfx.TransientVertexBuffer
    bgfx.AllocTransientVertexBuffer(addr(tvb), max_vertices, s_metaballVertices_Decl)

    const num_spheres = 16
    var sphere: array[num_spheres, Vec4]
    var index = 0
    while index < num_spheres:
        let fii = float32(index)
        let HDIM = DIMS*0.5'f32
        sphere[index][0] = fpumath.fsin(time*(fii*0.21'f32)+fii*0.37'f32)*(HDIM-8.0'f32)
        sphere[index][1] = fpumath.fsin(time*(fii*0.37'f32)+fii*0.67'f32)*(HDIM-8.0'f32)
        sphere[index][2] = fpumath.fcos(time*(fii*0.11'f32)+fii*0.13'f32)*(HDIM-8.0'f32)
        sphere[index][3] = 1.0'f32/(2.0'f32+(fpumath.fsin(time*(fii*0.13'f32) )*0.5'f32+0.5'f32)*2.0'f32)
        index = index+1

    prof_update = GetTime() 

    var zz = 0
    var yy = 0
    var xx = 0
    while zz < DIMS:
        yy = 0
        while yy < DIMS:
            xx = 0
            while xx < DIMS:
                let offset = (zz*DIMS+yy)*DIMS
                var dist = 0.0'f32
                var prod = 1.0'f32
                index = 0
                while index < num_spheres:
                    const HFDIMS = -FDIMS*0.5'f32 # 16
                    let dx = sphere[index][0]-(HFDIMS+float32(xx))
                    let dy = sphere[index][1]-(HFDIMS+float32(yy))
                    let dz = sphere[index][2]-(HFDIMS+float32(zz))
                    let invr = sphere[index][3]
                    var dot = dx*dx+dy*dy+dz*dz
                    dot = dot*invr*invr

                    dist = dist*dot
                    dist = dist+prod
                    prod = prod*dot
                    index = index+1
                self.m_grid[offset+xx].value = (dist/prod)-1.0'f32
                xx = xx+1
            yy = yy+1
        zz = zz+1

    prof_update = GetTime()-prof_update

    prof_normal = GetTime()

    zz = 1
    while zz < DIMS-1:
        yy = 1
        while yy < DIMS-1:
            xx = 1
            let offset = (zz*DIMS+yy)*DIMS
            while xx < DIMS-1:
                let xoffset = offset+xx
                let normal = [
                    self.m_grid[xoffset-1  ].value-self.m_grid[xoffset+1  ].value,
                    self.m_grid[xoffset-y_pitch].value-self.m_grid[xoffset+y_pitch].value,
                    self.m_grid[xoffset-z_pitch].value-self.m_grid[xoffset+z_pitch].value
                ]
                fpumath.vec3Norm(self.m_grid[xoffset].normal, normal)
                xx = xx+1
            yy = yy+1
        zz = zz+1

    prof_normal = GetTime()-prof_normal

    prof_triangulate = GetTime()

    var current_pos = cast[ptr PosNormalColorVertex](tvb.data)

    zz = 0
    while zz < DIMS-1 and num_vertices+12 < max_vertices:
        let fzz = float32(zz)
        var rgb: array[6, float32]
        rgb[2] = fzz*inv_dim
        rgb[5] = (fzz+1)*inv_dim
        yy = 0
        while yy < DIMS-1 and num_vertices+12 < max_vertices:
            let fyy = float32(yy)
            let offset = (zz*DIMS+yy)*DIMS
            rgb[1] = fyy*inv_dim
            rgb[4] = (fyy+1)*inv_dim
            xx = 0
            while xx < DIMS-1 and num_vertices+12 < max_vertices:
                let fxx = float32(xx)
                let xoffset = offset+xx
                rgb[0] = fxx*inv_dim
                rgb[3] = (fxx+1'f32)*inv_dim
                
                const HFDIMS = -FDIMS*0.5'f32 # -16
                let pos = [
                    HFDIMS+fxx,
                    HFDIMS+fyy,
                    HFDIMS+fzz
                ]

                let val = [
                    addr(self.m_grid[xoffset+z_pitch+y_pitch]),
                    addr(self.m_grid[xoffset+z_pitch+y_pitch+1]),
                    addr(self.m_grid[xoffset+y_pitch+1]),
                    addr(self.m_grid[xoffset+y_pitch]),
                    addr(self.m_grid[xoffset+z_pitch]),
                    addr(self.m_grid[xoffset+z_pitch+1]),
                    addr(self.m_grid[xoffset+1]),
                    addr(self.m_grid[xoffset])
                ]
                let num = triangulate(current_pos, stride, rgb, pos, val, 0.5'f32)
                current_pos = cast[ptr PosNormalColorVertex](cast[ByteAddress](current_pos)+int(num))
                num_vertices = num_vertices+int(num)
                xx = xx+1
            yy = yy+1
        zz = zz+1

    prof_triangulate = GetTime()-prof_triangulate

    var mtx: Mat4
    fpumath.mtxIdentity(mtx)
    fpumath.mtxRotateXY(mtx, time*0.67'f32, time)

    bgfx.SetTransform(addr(mtx[0]))

    bgfx.SetVertexBuffer(addr(tvb), 0, uint32(num_vertices))

    bgfx.SetState(BGFX_STATE_DEFAULT)

    bgfx.Submit(0, self.m_program)

    bgfx.DebugTextPrintf(1, 4, 0x0f, "Num vertices: %5d (%6.4f%%)", num_vertices, num_vertices.toFloat()/max_vertices.toFloat()*100)
    bgfx.DebugTextPrintf(1, 5, 0x0f, "      Update: % 7.3f[ms]", prof_update*toMs)
    bgfx.DebugTextPrintf(1, 6, 0x0f, "Calc Normals: % 7.3f[ms]", prof_normal*toMs)
    bgfx.DebugTextPrintf(1, 7, 0x0f, " Triangulate: % 7.3f[ms]", prof_triangulate*toMs)
    bgfx.DebugTextPrintf(1, 8, 0x0f, "       Frame: %7.3f[ms]", frameTime*toMs);
    bgfx.DebugTextPrintf(1, 9, 0x0f, "         FPS: %7.3f", 1.0'f32/frameTime);


    bgfx.Frame()

StartExample[ExampleMetaball]()
