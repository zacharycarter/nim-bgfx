# Copyright 2017 Cory Noll Crimmins - Golden
# License: BSD-2
# Port for bgfx defines

const BGFX_API_VERSION* = 35'u32

const
    BGFX_STATE_RGB_WRITE* = 0x0000000000000001'u64 # Enable RGB write.
    BGFX_STATE_ALPHA_WRITE* = 0x0000000000000002'u64 # Enable alpha write.
    BGFX_STATE_DEPTH_WRITE* = 0x0000000000000004'u64 # Enable depth write.
    BGFX_STATE_DEPTH_TEST_LESS* = 0x0000000000000010'u64 # Enable depth test, less.
    BGFX_STATE_DEPTH_TEST_LEQUAL* = 0x0000000000000020'u64 # Enable depth test, less equal.
    BGFX_STATE_DEPTH_TEST_EQUAL* = 0x0000000000000030'u64 # Enable depth test, equal.
    BGFX_STATE_DEPTH_TEST_GEQUAL* = 0x0000000000000040'u64 # Enable depth test, greater equal.
    BGFX_STATE_DEPTH_TEST_GREATER* = 0x0000000000000050'u64 # Enable depth test, greater.
    BGFX_STATE_DEPTH_TEST_NOTEQUAL* = 0x0000000000000060'u64 # Enable depth test, not equal.
    BGFX_STATE_DEPTH_TEST_NEVER* = 0x0000000000000070'u64 # Enable depth test, never.
    BGFX_STATE_DEPTH_TEST_ALWAYS* = 0x0000000000000080'u64 # Enable depth test, always.
    BGFX_STATE_DEPTH_TEST_SHIFT* = 4'u64
    BGFX_STATE_DEPTH_TEST_MASK* = 0x00000000000000F0'u64 # Depth test state bit mask.
    BGFX_STATE_BLEND_ZERO* = 0x0000000000001000'u64 #
    BGFX_STATE_BLEND_ONE* = 0x0000000000002000'u64 #
    BGFX_STATE_BLEND_SRC_COLOR* = 0x0000000000003000'u64 #
    BGFX_STATE_BLEND_INV_SRC_COLOR* = 0x0000000000004000'u64 #
    BGFX_STATE_BLEND_SRC_ALPHA* = 0x0000000000005000'u64 #
    BGFX_STATE_BLEND_INV_SRC_ALPHA* = 0x0000000000006000'u64 #
    BGFX_STATE_BLEND_DST_ALPHA* = 0x0000000000007000'u64 #
    BGFX_STATE_BLEND_INV_DST_ALPHA* = 0x0000000000008000'u64 #
    BGFX_STATE_BLEND_DST_COLOR* = 0x0000000000009000'u64 #
    BGFX_STATE_BLEND_INV_DST_COLOR* = 0x000000000000A000'u64 #
    BGFX_STATE_BLEND_SRC_ALPHA_SAT* = 0x000000000000B000'u64 #
    BGFX_STATE_BLEND_FACTOR* = 0x000000000000C000'u64 #
    BGFX_STATE_BLEND_INV_FACTOR* = 0x000000000000D000'u64 #
    BGFX_STATE_BLEND_SHIFT* = 12'u64
    BGFX_STATE_BLEND_MASK* = 0x000000000FFFF000'u64 # Blend state bit mask.
    BGFX_STATE_BLEND_EQUATION_ADD* = 0x0000000000000000'u64 #
    BGFX_STATE_BLEND_EQUATION_SUB* = 0x0000000010000000'u64 #
    BGFX_STATE_BLEND_EQUATION_REVSUB* = 0x0000000020000000'u64 #
    BGFX_STATE_BLEND_EQUATION_MIN* = 0x0000000030000000'u64 #
    BGFX_STATE_BLEND_EQUATION_MAX* = 0x0000000040000000'u64 #
    BGFX_STATE_BLEND_EQUATION_SHIFT* = 28'u64
    BGFX_STATE_BLEND_EQUATION_MASK* = 0x00000003F0000000'u64 # Blend equation bit mask.
    BGFX_STATE_BLEND_INDEPENDENT* = 0x0000000400000000'u64 # Enable blend independent.
    BGFX_STATE_BLEND_ALPHA_TO_COVERAGE* = 0x0000000800000000'u64 # Enable alpha to coverage.
    BGFX_STATE_CULL_CW* = 0x0000001000000000'u64 # Cull clockwise triangles.
    BGFX_STATE_CULL_CCW* = 0x0000002000000000'u64 # Cull counter-clockwise triangles.
    BGFX_STATE_CULL_SHIFT* = 36'u64
    BGFX_STATE_CULL_MASK* = 0x0000003000000000'u64 # Culling mode bit mask.

const
    BGFX_STATE_ALPHA_REF_SHIFT* = 40'u64
    BGFX_STATE_ALPHA_REF_MASK* = 0x0000FF0000000000'u64 # Alpha reference bit mask.
    BGFX_STATE_PT_TRISTRIP* = 0x0001000000000000'u64 # Tristrip.
    BGFX_STATE_PT_LINES* = 0x0002000000000000'u64 # Lines.
    BGFX_STATE_PT_LINESTRIP* = 0x0003000000000000'u64 # Line strip.
    BGFX_STATE_PT_POINTS* = 0x0004000000000000'u64 # Points.
    BGFX_STATE_PT_SHIFT* = 48'u64
    BGFX_STATE_PT_MASK* = 0x0007000000000000'u64 # Primitive type bit mask.
    BGFX_STATE_POINT_SIZE_SHIFT* = 52'u64
    BGFX_STATE_POINT_SIZE_MASK* = 0x00F0000000000000'u64 # Point size bit mask.

const
    BGFX_STATE_MSAA* = 0x0100000000000000'u64 # Enable MSAA rasterization.
    BGFX_STATE_LINEAA* = 0x0200000000000000'u64 # Enable line AA rasterization.
    BGFX_STATE_CONSERVATIVE_RASTER* = 0x0400000000000000'u64 # Enable conservative rasterization.

const
    BGFX_STATE_RESERVED_SHIFT* = 61'u64
    BGFX_STATE_RESERVED_MASK* = 0xE000000000000000'u64 # Internal bits mask.

const
    BGFX_STATE_NONE* = 0x0000000000000000'u64 # No state.
    BGFX_STATE_MASK* = 0xFFFFFFFFFFFFFFFF'u64 # State mask.

const BGFX_STATE_DEFAULT* = (0'u64 or BGFX_STATE_RGB_WRITE or BGFX_STATE_ALPHA_WRITE or BGFX_STATE_DEPTH_TEST_LESS or BGFX_STATE_DEPTH_WRITE or BGFX_STATE_CULL_CW or BGFX_STATE_MSAA)

template BGFX_STATE_ALPHA_REF*(refer: untyped): untyped = (((refer) shl BGFX_STATE_ALPHA_REF_SHIFT) and BGFX_STATE_ALPHA_REF_MASK)

template BGFX_STATE_POINT_SIZE*(size: untyped): untyped = (((size) shl BGFX_STATE_POINT_SIZE_SHIFT) and BGFX_STATE_POINT_SIZE_MASK)

template BGFX_STATE_BLEND_FUNC_SEPARATE*(srcRGB, dstRGB, srcA, dstA: untyped): untyped = (0'u64) or (((srcRGB) or ((dstRGB) shl 4)) or (((srcA) or ((dstA) shl 4)) shl 8))

template BGFX_STATE_BLEND_EQUATION_SEPARATE*(rgb, a: untyped): untyped = ((rgb) or ((a) shl 3))

template BGFX_STATE_BLEND_FUNC*(src, dst: untyped): untyped = BGFX_STATE_BLEND_FUNC_SEPARATE(src, dst, src, dst)

template BGFX_STATE_BLEND_EQUATION*(equation: untyped): untyped = BGFX_STATE_BLEND_EQUATION_SEPARATE(equation, equation)

const
    BGFX_STATE_BLEND_ADD* = (BGFX_STATE_BLEND_FUNC(BGFX_STATE_BLEND_ONE, BGFX_STATE_BLEND_ONE))
    BGFX_STATE_BLEND_ALPHA* = (BGFX_STATE_BLEND_FUNC(BGFX_STATE_BLEND_SRC_ALPHA, BGFX_STATE_BLEND_INV_SRC_ALPHA))
    BGFX_STATE_BLEND_DARKEN* = (BGFX_STATE_BLEND_FUNC(BGFX_STATE_BLEND_ONE, BGFX_STATE_BLEND_ONE) or BGFX_STATE_BLEND_EQUATION(BGFX_STATE_BLEND_EQUATION_MIN))
    BGFX_STATE_BLEND_LIGHTEN* = (BGFX_STATE_BLEND_FUNC(BGFX_STATE_BLEND_ONE, BGFX_STATE_BLEND_ONE) or BGFX_STATE_BLEND_EQUATION(BGFX_STATE_BLEND_EQUATION_MAX))
    BGFX_STATE_BLEND_MULTIPLY* = (BGFX_STATE_BLEND_FUNC(BGFX_STATE_BLEND_DST_COLOR, BGFX_STATE_BLEND_ZERO))
    BGFX_STATE_BLEND_NORMAL* = (BGFX_STATE_BLEND_FUNC(BGFX_STATE_BLEND_ONE, BGFX_STATE_BLEND_INV_SRC_ALPHA))
    BGFX_STATE_BLEND_SCREEN* = (BGFX_STATE_BLEND_FUNC(BGFX_STATE_BLEND_ONE, BGFX_STATE_BLEND_INV_SRC_COLOR))
    BGFX_STATE_BLEND_LINEAR_BURN* = (BGFX_STATE_BLEND_FUNC(BGFX_STATE_BLEND_DST_COLOR, BGFX_STATE_BLEND_INV_DST_COLOR) or BGFX_STATE_BLEND_EQUATION(BGFX_STATE_BLEND_EQUATION_SUB))

template BGFX_STATE_BLEND_FUNC_RT_x*(src, dst: untyped): untyped = (0'u64 or (uint32((src) shr BGFX_STATE_BLEND_SHIFT) or (uint32((dst) shr BGFX_STATE_BLEND_SHIFT) shl 4)))

template BGFX_STATE_BLEND_FUNC_RT_xE*(src, dst, equation: untyped): untyped = (0'u64 or BGFX_STATE_BLEND_FUNC_RT_x(src, dst) or (uint32((equation) shr BGFX_STATE_BLEND_EQUATION_SHIFT) shl 8))

template BGFX_STATE_BLEND_FUNC_RT_1*(src, dst: untyped): untyped = (BGFX_STATE_BLEND_FUNC_RT_x(src, dst) shl 0)

template BGFX_STATE_BLEND_FUNC_RT_2*(src, dst: untyped): untyped = (BGFX_STATE_BLEND_FUNC_RT_x(src, dst) shl 11)

template BGFX_STATE_BLEND_FUNC_RT_3*(src, dst: untyped): untyped = (BGFX_STATE_BLEND_FUNC_RT_x(src, dst) shl 22)

template BGFX_STATE_BLEND_FUNC_RT_1E*(src, dst, equation: untyped): untyped = (BGFX_STATE_BLEND_FUNC_RT_xE(src, dst, equation) shl 0)

template BGFX_STATE_BLEND_FUNC_RT_2E*(src, dst, equation: untyped): untyped = (BGFX_STATE_BLEND_FUNC_RT_xE(src, dst, equation) shl 11)

template BGFX_STATE_BLEND_FUNC_RT_3E*(src, dst, equation: untyped): untyped = (BGFX_STATE_BLEND_FUNC_RT_xE(src, dst, equation) shl 22)

const
    BGFX_STENCIL_FUNC_REF_SHIFT* = 0'u32
    BGFX_STENCIL_FUNC_REF_MASK* = 0x000000FF'u32 #
    BGFX_STENCIL_FUNC_RMASK_SHIFT* = 8'u32
    BGFX_STENCIL_FUNC_RMASK_MASK* = 0x0000FF00'u32 #
    BGFX_STENCIL_TEST_LESS* = 0x00010000'u32 # Enable stencil test, less.
    BGFX_STENCIL_TEST_LEQUAL* = 0x00020000'u32 #
    BGFX_STENCIL_TEST_EQUAL* = 0x00030000'u32 #
    BGFX_STENCIL_TEST_GEQUAL* = 0x00040000'u32 #
    BGFX_STENCIL_TEST_GREATER* = 0x00050000'u32 #
    BGFX_STENCIL_TEST_NOTEQUAL* = 0x00060000'u32 #
    BGFX_STENCIL_TEST_NEVER* = 0x00070000'u32 #
    BGFX_STENCIL_TEST_ALWAYS* = 0x00080000'u32 #
    BGFX_STENCIL_TEST_SHIFT* = 16'u32
    BGFX_STENCIL_TEST_MASK* = 0x000F0000'u32 # Stencil test bit mask.
    BGFX_STENCIL_OP_FAIL_S_ZERO* = 0x00000000'u32 # Zero.
    BGFX_STENCIL_OP_FAIL_S_KEEP* = 0x00100000'u32 # Keep.
    BGFX_STENCIL_OP_FAIL_S_REPLACE* = 0x00200000'u32 # Replace.
    BGFX_STENCIL_OP_FAIL_S_INCR* = 0x00300000'u32 # Increment and wrap.
    BGFX_STENCIL_OP_FAIL_S_INCRSAT* = 0x00400000'u32 # Increment and clamp.
    BGFX_STENCIL_OP_FAIL_S_DECR* = 0x00500000'u32 # Decrement and wrap.
    BGFX_STENCIL_OP_FAIL_S_DECRSAT* = 0x00600000'u32 # Decrement and clamp.
    BGFX_STENCIL_OP_FAIL_S_INVERT* = 0x00700000'u32 # Invert.
    BGFX_STENCIL_OP_FAIL_S_SHIFT* = 20'u32
    BGFX_STENCIL_OP_FAIL_S_MASK* = 0x00F00000'u32 # Stencil operation fail bit mask.
    BGFX_STENCIL_OP_FAIL_Z_ZERO* = 0x00000000'u32 #
    BGFX_STENCIL_OP_FAIL_Z_KEEP* = 0x01000000'u32 #
    BGFX_STENCIL_OP_FAIL_Z_REPLACE* = 0x02000000'u32 #
    BGFX_STENCIL_OP_FAIL_Z_INCR* = 0x03000000'u32 #
    BGFX_STENCIL_OP_FAIL_Z_INCRSAT* = 0x04000000'u32 #
    BGFX_STENCIL_OP_FAIL_Z_DECR* = 0x05000000'u32 #
    BGFX_STENCIL_OP_FAIL_Z_DECRSAT* = 0x06000000'u32 #
    BGFX_STENCIL_OP_FAIL_Z_INVERT* = 0x07000000'u32 #
    BGFX_STENCIL_OP_FAIL_Z_SHIFT* = 24'u32
    BGFX_STENCIL_OP_FAIL_Z_MASK* = 0x0F000000'u32 # Stencil operation fail depth bit mask.
    BGFX_STENCIL_OP_PASS_Z_ZERO* = 0x00000000'u32 #
    BGFX_STENCIL_OP_PASS_Z_KEEP* = 0x10000000'u32 #
    BGFX_STENCIL_OP_PASS_Z_REPLACE* = 0x20000000'u32 #
    BGFX_STENCIL_OP_PASS_Z_INCR* = 0x30000000'u32 #
    BGFX_STENCIL_OP_PASS_Z_INCRSAT* = 0x40000000'u32 #
    BGFX_STENCIL_OP_PASS_Z_DECR* = 0x50000000'u32 #
    BGFX_STENCIL_OP_PASS_Z_DECRSAT* = 0x60000000'u32 #
    BGFX_STENCIL_OP_PASS_Z_INVERT* = 0x70000000'u32 #
    BGFX_STENCIL_OP_PASS_Z_SHIFT* = 28'u32
    BGFX_STENCIL_OP_PASS_Z_MASK* = 0xF0000000'u32 # Stencil operation pass depth bit mask.
    BGFX_STENCIL_NONE* = 0x00000000'u32 #
    BGFX_STENCIL_MASK* = 0xFFFFFFFF'u32 #
    BGFX_STENCIL_DEFAULT* = 0x00000000'u32 #

template BGFX_STENCIL_FUNC_REF*(refer: untyped): untyped = ((uint32(refer) shl BGFX_STENCIL_FUNC_REF_SHIFT) and BGFX_STENCIL_FUNC_REF_MASK)

template BGFX_STENCIL_FUNC_RMASK*(mask: untyped): untyped = ((uint32(mask) shl BGFX_STENCIL_FUNC_RMASK_SHIFT) and BGFX_STENCIL_FUNC_RMASK_MASK)

const
    BGFX_CLEAR_NONE* = 0x0000'u16 # No clear flags.
    BGFX_CLEAR_COLOR* = 0x0001'u16 # Clear color.
    BGFX_CLEAR_DEPTH* = 0x0002'u16 # Clear depth.
    BGFX_CLEAR_STENCIL* = 0x0004'u16 # Clear stencil.
    BGFX_CLEAR_DISCARD_COLOR_0* = 0x0008'u16 # Discard frame buffer attachment 0.
    BGFX_CLEAR_DISCARD_COLOR_1* = 0x0010'u16 # Discard frame buffer attachment 1.
    BGFX_CLEAR_DISCARD_COLOR_2* = 0x0020'u16 # Discard frame buffer attachment 2.
    BGFX_CLEAR_DISCARD_COLOR_3* = 0x0040'u16 # Discard frame buffer attachment 3.
    BGFX_CLEAR_DISCARD_COLOR_4* = 0x0080'u16 # Discard frame buffer attachment 4.
    BGFX_CLEAR_DISCARD_COLOR_5* = 0x0100'u16 # Discard frame buffer attachment 5.
    BGFX_CLEAR_DISCARD_COLOR_6* = 0x0200'u16 # Discard frame buffer attachment 6.
    BGFX_CLEAR_DISCARD_COLOR_7* = 0x0400'u16 # Discard frame buffer attachment 7.
    BGFX_CLEAR_DISCARD_DEPTH* = 0x0800'u16 # Discard frame buffer depth attachment.
    BGFX_CLEAR_DISCARD_STENCIL* = 0x1000'u16 # Discard frame buffer stencil attachment.
    BGFX_CLEAR_DISCARD_COLOR_MASK* = (0'u16 or BGFX_CLEAR_DISCARD_COLOR_0 or BGFX_CLEAR_DISCARD_COLOR_1 or BGFX_CLEAR_DISCARD_COLOR_2 or BGFX_CLEAR_DISCARD_COLOR_3 or BGFX_CLEAR_DISCARD_COLOR_4 or BGFX_CLEAR_DISCARD_COLOR_5 or BGFX_CLEAR_DISCARD_COLOR_6 or BGFX_CLEAR_DISCARD_COLOR_7)
    BGFX_CLEAR_DISCARD_MASK* = (0'u16 or BGFX_CLEAR_DISCARD_COLOR_MASK or BGFX_CLEAR_DISCARD_DEPTH or BGFX_CLEAR_DISCARD_STENCIL)
    BGFX_DEBUG_NONE* = 0x0000'u16 # No debug.
    BGFX_DEBUG_WIREFRAME* = 0x0001'u16 # Enable wireframe for all primitives.
    BGFX_DEBUG_IFH* = 0x0002'u16 # Enable infinitely fast hardware test. No draw calls will be submitted to driver. It’s useful when profiling to quickly assess bottleneck between CPU and GPU.
    BGFX_DEBUG_STATS* = 0x0004'u16 # Enable statistics display.
    BGFX_DEBUG_TEXT* = 0x0008'u16 # Enable debug text display.

const
    BGFX_BUFFER_NONE* = 0x0000'u16 #
    BGFX_BUFFER_COMPUTE_FORMAT_8x1* = 0x0001'u16 #
    BGFX_BUFFER_COMPUTE_FORMAT_8x2* = 0x0002'u16 #
    BGFX_BUFFER_COMPUTE_FORMAT_8x4* = 0x0003'u16 #
    BGFX_BUFFER_COMPUTE_FORMAT_16x1* = 0x0004'u16 #
    BGFX_BUFFER_COMPUTE_FORMAT_16x2* = 0x0005'u16 #
    BGFX_BUFFER_COMPUTE_FORMAT_16x4* = 0x0006'u16 #
    BGFX_BUFFER_COMPUTE_FORMAT_32x1* = 0x0007'u16 #
    BGFX_BUFFER_COMPUTE_FORMAT_32x2* = 0x0008'u16 #
    BGFX_BUFFER_COMPUTE_FORMAT_32x4* = 0x0009'u16 #
    BGFX_BUFFER_COMPUTE_FORMAT_SHIFT* = 0'u16
    BGFX_BUFFER_COMPUTE_FORMAT_MASK* = 0x000F'u16 #
    BGFX_BUFFER_COMPUTE_TYPE_UINT* = 0x0010'u16 #
    BGFX_BUFFER_COMPUTE_TYPE_INT* = 0x0020'u16 #
    BGFX_BUFFER_COMPUTE_TYPE_FLOAT* = 0x0030'u16 #
    BGFX_BUFFER_COMPUTE_TYPE_SHIFT* = 4'u16
    BGFX_BUFFER_COMPUTE_TYPE_MASK* = 0x0030'u16 #
    BGFX_BUFFER_COMPUTE_READ* = 0x0100'u16 # Buffer will be read by shader.
    BGFX_BUFFER_COMPUTE_WRITE* = 0x0200'u16 # Buffer will be used for writing.
    BGFX_BUFFER_DRAW_INDIRECT* = 0x0400'u16 # Buffer will be used for storing draw indirect commands.
    BGFX_BUFFER_ALLOW_RESIZE* = 0x0800'u16 #
    BGFX_BUFFER_INDEX32* = 0x1000'u16 #
    BGFX_BUFFER_COMPUTE_READ_WRITE* = (0'u16 or BGFX_BUFFER_COMPUTE_READ or BGFX_BUFFER_COMPUTE_WRITE)

const
    BGFX_TEXTURE_NONE* = 0x00000000'u32 #
    BGFX_TEXTURE_U_MIRROR* = 0x00000001'u32 #
    BGFX_TEXTURE_U_CLAMP* = 0x00000002'u32 #
    BGFX_TEXTURE_U_BORDER* = 0x00000003'u32 #
    BGFX_TEXTURE_U_SHIFT* = 0'u32
    BGFX_TEXTURE_U_MASK* = 0x00000003'u32 #
    BGFX_TEXTURE_V_MIRROR* = 0x00000004'u32 #
    BGFX_TEXTURE_V_CLAMP* = 0x00000008'u32 #
    BGFX_TEXTURE_V_BORDER* = 0x0000000C'u32 #
    BGFX_TEXTURE_V_SHIFT* = 2'u32
    BGFX_TEXTURE_V_MASK* = 0x0000000C'u32 #
    BGFX_TEXTURE_W_MIRROR* = 0x00000010'u32 #
    BGFX_TEXTURE_W_CLAMP* = 0x00000020'u32 #
    BGFX_TEXTURE_W_BORDER* = 0x00000030'u32 #
    BGFX_TEXTURE_W_SHIFT* = 4'u32
    BGFX_TEXTURE_W_MASK* = 0x00000030'u32 #
    BGFX_TEXTURE_MIN_POINT* = 0x00000040'u32 #
    BGFX_TEXTURE_MIN_ANISOTROPIC* = 0x00000080'u32 #
    BGFX_TEXTURE_MIN_SHIFT* = 6'u32
    BGFX_TEXTURE_MIN_MASK* = 0x000000C0'u32 #
    BGFX_TEXTURE_MAG_POINT* = 0x00000100'u32 #
    BGFX_TEXTURE_MAG_ANISOTROPIC* = 0x00000200'u32 #
    BGFX_TEXTURE_MAG_SHIFT* = 8'u32
    BGFX_TEXTURE_MAG_MASK* = 0x00000300'u32 #
    BGFX_TEXTURE_MIP_POINT* = 0x00000400'u32 #
    BGFX_TEXTURE_MIP_SHIFT* = 10'u32
    BGFX_TEXTURE_MIP_MASK* = 0x00000400'u32 #
    BGFX_TEXTURE_MSAA_SAMPLE* = 0x00000800'u32 #
    BGFX_TEXTURE_RT* = 0x00001000'u32 #
    BGFX_TEXTURE_RT_MSAA_X2* = 0x00002000'u32 #
    BGFX_TEXTURE_RT_MSAA_X4* = 0x00003000'u32 #
    BGFX_TEXTURE_RT_MSAA_X8* = 0x00004000'u32 #
    BGFX_TEXTURE_RT_MSAA_X16* = 0x00005000'u32 #
    BGFX_TEXTURE_RT_MSAA_SHIFT* = 12'u32
    BGFX_TEXTURE_RT_MSAA_MASK* = 0x00007000'u32 #
    BGFX_TEXTURE_RT_WRITE_ONLY* = 0x00008000'u32 #
    BGFX_TEXTURE_RT_MASK* = 0x0000F000'u32 #
    BGFX_TEXTURE_COMPARE_LESS* = 0x00010000'u32 #
    BGFX_TEXTURE_COMPARE_LEQUAL* = 0x00020000'u32 #
    BGFX_TEXTURE_COMPARE_EQUAL* = 0x00030000'u32 #
    BGFX_TEXTURE_COMPARE_GEQUAL* = 0x00040000'u32 #
    BGFX_TEXTURE_COMPARE_GREATER* = 0x00050000'u32 #
    BGFX_TEXTURE_COMPARE_NOTEQUAL* = 0x00060000'u32 #
    BGFX_TEXTURE_COMPARE_NEVER* = 0x00070000'u32 #
    BGFX_TEXTURE_COMPARE_ALWAYS* = 0x00080000'u32 #
    BGFX_TEXTURE_COMPARE_SHIFT* = 16'u32
    BGFX_TEXTURE_COMPARE_MASK* = 0x000F0000'u32 #
    BGFX_TEXTURE_COMPUTE_WRITE* = 0x00100000'u32 #
    BGFX_TEXTURE_SRGB* = 0x00200000'u32 #
    BGFX_TEXTURE_BLIT_DST* = 0x00400000'u32 #
    BGFX_TEXTURE_READ_BACK* = 0x00800000'u32 #
    BGFX_TEXTURE_BORDER_COLOR_SHIFT* = 24'u32
    BGFX_TEXTURE_BORDER_COLOR_MASK* = 0x0F000000'u32 #
    BGFX_TEXTURE_RESERVED_SHIFT* = 28'u32
    BGFX_TEXTURE_RESERVED_MASK* = 0xF0000000'u32 #

template BGFX_TEXTURE_BORDER_COLOR*(index: untyped): untyped = ((index shl BGFX_TEXTURE_BORDER_COLOR_SHIFT) and BGFX_TEXTURE_BORDER_COLOR_MASK)

const BGFX_TEXTURE_SAMPLER_BITS_MASK* = (0'u32 or BGFX_TEXTURE_U_MASK or BGFX_TEXTURE_V_MASK or BGFX_TEXTURE_W_MASK or BGFX_TEXTURE_MIN_MASK or BGFX_TEXTURE_MAG_MASK or BGFX_TEXTURE_MIP_MASK or BGFX_TEXTURE_COMPARE_MASK)

const
    BGFX_RESET_NONE* = 0x00000000'u32 # No reset flags.
    BGFX_RESET_FULLSCREEN* = 0x00000001'u32 # Not supported yet.
    BGFX_RESET_FULLSCREEN_SHIFT* = 0'u32
    BGFX_RESET_FULLSCREEN_MASK* = 0x00000001'u32 # Fullscreen bit mask.
    BGFX_RESET_MSAA_X2* = 0x00000010'u32 # Enable 2x MSAA.
    BGFX_RESET_MSAA_X4* = 0x00000020'u32 # Enable 4x MSAA.
    BGFX_RESET_MSAA_X8* = 0x00000030'u32 # Enable 8x MSAA.
    BGFX_RESET_MSAA_X16* = 0x00000040'u32 # Enable 16x MSAA.
    BGFX_RESET_MSAA_SHIFT* = 4'u32
    BGFX_RESET_MSAA_MASK* = 0x00000070'u32 # MSAA mode bit mask.
    BGFX_RESET_VSYNC* = 0x00000080'u32 # Enable V-Sync.
    BGFX_RESET_MAXANISOTROPY* = 0x00000100'u32 # Turn on/off max anisotropy.
    BGFX_RESET_CAPTURE* = 0x00000200'u32 # Begin screen capture.
    BGFX_RESET_HMD* = 0x00000400'u32 # HMD stereo rendering.
    BGFX_RESET_HMD_DEBUG* = 0x00000800'u32 # HMD stereo rendering debug mode.
    BGFX_RESET_HMD_RECENTER* = 0x00001000'u32 # HMD calibration.
    BGFX_RESET_FLUSH_AFTER_RENDER* = 0x00002000'u32 # Flush rendering after submitting to GPU.
    BGFX_RESET_FLIP_AFTER_RENDER* = 0x00004000'u32 # This flag  specifies where flip occurs. Default behavior is that flip occurs before rendering new frame. This flag only has effect when `BGFX_CONFIG_MULTITHREADED=0`.
    BGFX_RESET_SRGB_BACKBUFFER* = 0x00008000'u32 # Enable sRGB backbuffer.
    BGFX_RESET_HIDPI* = 0x00010000'u32 # Enable HiDPI rendering.
    BGFX_RESET_DEPTH_CLAMP* = 0x00020000'u32 # Enable depth clamp.
    BGFX_RESET_SUSPEND* = 0x00040000'u32 # Suspend rendering.
    BGFX_RESET_RESERVED_SHIFT* = 31'u32
    BGFX_RESET_RESERVED_MASK* = 0x80000000'u32 # Internal bits mask.

const
    BGFX_CAPS_TEXTURE_COMPARE_LEQUAL* = 0x0000000000000001'u64 # Texture compare less equal mode is supported.
    BGFX_CAPS_TEXTURE_COMPARE_ALL* = 0x0000000000000003'u64 # All texture compare modes are supported.
    BGFX_CAPS_TEXTURE_3D* = 0x0000000000000004'u64 # 3D textures are supported.
    BGFX_CAPS_VERTEX_ATTRIB_HALF* = 0x0000000000000008'u64 # Vertex attribute half-float is supported.
    BGFX_CAPS_VERTEX_ATTRIB_UINT10* = 0x0000000000000010'u64 # Vertex attribute 10_10_10_2 is supported.
    BGFX_CAPS_INSTANCING* = 0x0000000000000020'u64 # Instancing is supported.
    BGFX_CAPS_RENDERER_MULTITHREADED* = 0x0000000000000040'u64 # Renderer is on separate thread.
    BGFX_CAPS_FRAGMENT_DEPTH* = 0x0000000000000080'u64 # Fragment depth is accessible in fragment shader.
    BGFX_CAPS_BLEND_INDEPENDENT* = 0x0000000000000100'u64 # Blend independent is supported.
    BGFX_CAPS_COMPUTE* = 0x0000000000000200'u64 # Compute shaders are supported.
    BGFX_CAPS_FRAGMENT_ORDERING* = 0x0000000000000400'u64 # Fragment ordering is available in fragment shader.
    BGFX_CAPS_SWAP_CHAIN* = 0x0000000000000800'u64 # Multiple windows are supported.
    BGFX_CAPS_HMD* = 0x0000000000001000'u64 # Head Mounted Display is available.
    BGFX_CAPS_INDEX32* = 0x0000000000002000'u64 # 32-bit indices are supported.
    BGFX_CAPS_DRAW_INDIRECT* = 0x0000000000004000'u64 # Draw indirect is supported.
    BGFX_CAPS_HIDPI* = 0x0000000000008000'u64 # HiDPI rendering is supported.
    BGFX_CAPS_TEXTURE_BLIT* = 0x0000000000010000'u64 # Texture blit is supported.
    BGFX_CAPS_TEXTURE_READ_BACK* = 0x0000000000020000'u64 # Read-back texture is supported.
    BGFX_CAPS_OCCLUSION_QUERY* = 0x0000000000040000'u64 # Occlusion query is supported.
    BGFX_CAPS_ALPHA_TO_COVERAGE* = 0x0000000000080000'u64 # Alpha to coverage is supported.
    BGFX_CAPS_CONSERVATIVE_RASTER* = 0x0000000000100000'u64 # Conservative rasterization is supported.
    BGFX_CAPS_TEXTURE_2D_ARRAY* = 0x0000000000200000'u64 # 2D texture array is supported.
    BGFX_CAPS_TEXTURE_CUBE_ARRAY* = 0x0000000000400000'u64 # Cubemap texture array is supported.

const
    BGFX_CAPS_FORMAT_TEXTURE_NONE* = 0x0000'u16 # Texture format is not supported.
    BGFX_CAPS_FORMAT_TEXTURE_2D* = 0x0001'u16 # Texture format is supported.
    BGFX_CAPS_FORMAT_TEXTURE_2D_SRGB* = 0x0002'u16 # Texture as sRGB format is supported.
    BGFX_CAPS_FORMAT_TEXTURE_2D_EMULATED* = 0x0004'u16 # Texture format is emulated.
    BGFX_CAPS_FORMAT_TEXTURE_3D* = 0x0008'u16 # Texture format is supported.
    BGFX_CAPS_FORMAT_TEXTURE_3D_SRGB* = 0x0010'u16 # Texture as sRGB format is supported.
    BGFX_CAPS_FORMAT_TEXTURE_3D_EMULATED* = 0x0020'u16 # Texture format is emulated.
    BGFX_CAPS_FORMAT_TEXTURE_CUBE* = 0x0040'u16 # Texture format is supported.
    BGFX_CAPS_FORMAT_TEXTURE_CUBE_SRGB* = 0x0080'u16 # Texture as sRGB format is supported.
    BGFX_CAPS_FORMAT_TEXTURE_CUBE_EMULATED* = 0x0100'u16 # Texture format is emulated.
    BGFX_CAPS_FORMAT_TEXTURE_VERTEX* = 0x0200'u16 # Texture format can be used from vertex shader.
    BGFX_CAPS_FORMAT_TEXTURE_IMAGE* = 0x0400'u16 # Texture format can be used as image from compute shader.
    BGFX_CAPS_FORMAT_TEXTURE_FRAMEBUFFER* = 0x0800'u16 # Texture format can be used as frame buffer.
    BGFX_CAPS_FORMAT_TEXTURE_FRAMEBUFFER_MSAA* = 0x1000'u16 # Texture format can be used as MSAA frame buffer.
    BGFX_CAPS_FORMAT_TEXTURE_MSAA* = 0x2000'u16 # Texture can be sampled as MSAA.
    BGFX_CAPS_FORMAT_TEXTURE_MIP_AUTOGEN* = 0x4000'u16 # Texture format supports auto-generated mips.

const
    BGFX_VIEW_NONE* = 0x00'u8 #
    BGFX_VIEW_STEREO* = 0x01'u8 # View will be rendered in stereo mode.

const
    BGFX_SUBMIT_EYE_LEFT* = 0x01'u8 # Submit to left eye.
    BGFX_SUBMIT_EYE_RIGHT* = 0x02'u8 # Submit to right eye.
    BGFX_SUBMIT_EYE_MASK* = 0x03'u8 #
    BGFX_SUBMIT_EYE_FIRST* = BGFX_SUBMIT_EYE_LEFT
    BGFX_SUBMIT_RESERVED_SHIFT* = 7'u8
    BGFX_SUBMIT_RESERVED_MASK* = 0x80'u8 # Internal bits mask.

const
    BGFX_PCI_ID_NONE* = 0x0000'u16 # Autoselect adapter.
    BGFX_PCI_ID_SOFTWARE_RASTERIZER* = 0x0001'u16 # Software rasterizer.
    BGFX_PCI_ID_AMD* = 0x1002'u16 # AMD adapter.
    BGFX_PCI_ID_INTEL* = 0x8086'u16 # Intel adapter.
    BGFX_PCI_ID_NVIDIA* = 0x10DE'u16 # nVidia adapter.

const
    BGFX_HMD_NONE* = 0x00'u8 # None.
    BGFX_HMD_DEVICE_RESOLUTION* = 0x01'u8 # Has HMD native resolution.
    BGFX_HMD_RENDERING* = 0x02'u8 # Rendering to HMD.

const
    BGFX_CUBE_MAP_POSITIVE_X* = 0x00000000'u32 # Cubemap +x.
    BGFX_CUBE_MAP_NEGATIVE_X* = 0x00000001'u32 # Cubemap -x.
    BGFX_CUBE_MAP_POSITIVE_Y* = 0x00000002'u32 # Cubemap +y.
    BGFX_CUBE_MAP_NEGATIVE_Y* = 0x00000003'u32 # Cubemap -y.
    BGFX_CUBE_MAP_POSITIVE_Z* = 0x00000004'u32 # Cubemap +z.
    BGFX_CUBE_MAP_NEGATIVE_Z* = 0x00000005'u32 # Cubemap -z.
